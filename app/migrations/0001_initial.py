# Generated by Django 5.1.4 on 2024-12-23 17:01

import app.UUIDAutoField
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountWarningPreset',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Account warning preset',
                'verbose_name_plural': 'Account warning presets',
                'db_table': 'account_warning_presets',
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.BooleanField(default=True)),
                ('all_day', models.BooleanField(default=False)),
                ('scheduled_at', models.DateTimeField(blank=True)),
                ('starts_at', models.DateTimeField(blank=True)),
                ('ends_at', models.DateTimeField(blank=True)),
                ('published_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
                'db_table': 'announcements',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.TextField(blank=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'db_table': 'conversations',
            },
        ),
        migrations.CreateModel(
            name='CustomEmoji',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortcode', models.TextField(unique=True)),
                ('domain', models.TextField(blank=True, unique=True)),
                ('disabled', models.BooleanField(default=False)),
                ('visible_in_picker', models.BooleanField(blank=True, default=True)),
                ('image_file_name', models.TextField(blank=True)),
                ('image_content_type', models.TextField(blank=True)),
                ('image_file_size', models.PositiveBigIntegerField(blank=True)),
                ('uri', models.TextField(blank=True)),
                ('image_remote_url', models.URLField(blank=True)),
                ('category_id', models.TextField(blank=True)),
                ('image_uploaded_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Custom emoji',
                'verbose_name_plural': 'Custom emojis',
                'db_table': 'custom_emoji',
            },
        ),
        migrations.CreateModel(
            name='CustomEmojiCatrgory',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Custom emoji category',
                'verbose_name_plural': 'Custom emoji categories',
                'db_table': 'custom_emoji_categories',
            },
        ),
        migrations.CreateModel(
            name='DomainAllow',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Domain allow',
                'verbose_name_plural': 'Domain allows',
                'db_table': 'domain_allows',
            },
        ),
        migrations.CreateModel(
            name='DomainBlock',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.TextField(unique=True)),
                ('reject_media', models.BooleanField(default=True)),
                ('reject_reports', models.BooleanField(default=True)),
                ('severity', models.PositiveBigIntegerField(blank=True)),
                ('private_comment', models.TextField(blank=True)),
                ('public_comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Domain block',
                'verbose_name_plural': 'Domain blocks',
                'db_table': 'domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='EmailDomainBlock',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Email domain block',
                'verbose_name_plural': 'Email domain blocks',
                'db_table': 'email_domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='PreviewCard',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(unique=True)),
                ('height', models.PositiveBigIntegerField(blank=True)),
                ('image_file_name', models.TextField(blank=True)),
                ('image_content_type', models.TextField(blank=True)),
                ('image_file_size', models.PositiveBigIntegerField(blank=True)),
                ('image_updated_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Preview card',
                'verbose_name_plural': 'Preview cards',
                'db_table': 'preview_cards',
            },
        ),
        migrations.CreateModel(
            name='Relay',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('follow_activity_id', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Relay',
                'verbose_name_plural': 'Relays',
                'db_table': 'relays',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('var', models.TextField(unique=True)),
                ('thing_type', models.TextField(blank=True, unique=True)),
                ('thing_id', models.TextField(blank=True, unique=True)),
                ('value', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='SiteUpload',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('var', models.TextField(unique=True)),
                ('file_file_name', models.TextField(blank=True)),
                ('file_content_type', models.TextField(blank=True)),
                ('meta', models.TextField(blank=True)),
                ('file_updated_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Site upload',
                'verbose_name_plural': 'Site uploads',
                'db_table': 'site_uploads',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True)),
                ('usable', models.BooleanField(blank=True, default=True)),
                ('trendable', models.BooleanField(blank=True, default=True)),
                ('listable', models.BooleanField(blank=True, default=True)),
                ('reviewed_at', models.DateTimeField(blank=True)),
                ('last_status_at', models.DateTimeField(blank=True)),
                ('max_score', models.PositiveBigIntegerField(blank=True)),
                ('max_score_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.TextField(db_index=True)),
                ('url', models.URLField(blank=True, db_index=True)),
                ('locked', models.BooleanField(default=False)),
                ('domain', models.TextField(blank=True)),
                ('private_key', models.TextField(blank=True)),
                ('avatar_file_name', models.TextField(blank=True)),
                ('avatar_content_type', models.TextField(blank=True)),
                ('avatar_file_size', models.PositiveBigIntegerField(blank=True)),
                ('avatar_updated_at', models.DateTimeField(blank=True)),
                ('header_file_name', models.TextField(blank=True)),
                ('header_content_type', models.TextField(blank=True)),
                ('header_file_size', models.PositiveBigIntegerField(blank=True)),
                ('header_updated_at', models.DateTimeField(blank=True)),
                ('avatar_remote_url', models.URLField(blank=True)),
                ('subscription_expires_at', models.DateTimeField(blank=True)),
                ('last_webfingered_at', models.DateTimeField(blank=True)),
                ('memorial', models.BooleanField(default=False)),
                ('featured_collection_url', models.URLField(blank=True)),
                ('fields', models.JSONField(blank=True)),
                ('actor_type', models.TextField(blank=True)),
                ('discoverable', models.BooleanField(blank=True, default=True)),
                ('silenced_at', models.DateTimeField(blank=True)),
                ('suspended_at', models.DateTimeField(blank=True)),
                ('trust_level', models.PositiveBigIntegerField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moved_to_account_id', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account', to='app.account')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': 'accounts',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('reset_password_token', models.TextField(blank=True, unique=True)),
                ('confirmation_token', models.TextField(blank=True, unique=True)),
                ('remember_token', models.TextField(blank=True, unique=True)),
                ('sign_in_count', models.PositiveBigIntegerField(default=0)),
                ('admin', models.BooleanField(default=False)),
                ('moderator', models.BooleanField(default=False)),
                ('approved', models.BooleanField(default=True)),
                ('reset_password_sent_at', models.DateTimeField(blank=True)),
                ('remember_created_at', models.DateTimeField(blank=True)),
                ('current_sign_in_at', models.DateTimeField(blank=True)),
                ('last_sign_in_at', models.DateTimeField(blank=True)),
                ('current_sign_in_ip', models.GenericIPAddressField(null=True)),
                ('last_sign_in_ip', models.GenericIPAddressField(null=True)),
                ('confirmed_at', models.DateTimeField(blank=True)),
                ('confirmation_sent_at', models.DateTimeField(blank=True)),
                ('unconfirmed_email', models.EmailField(blank=True, max_length=254)),
                ('locale', models.TextField(blank=True)),
                ('consumed_timestep', models.PositiveBigIntegerField(blank=True)),
                ('last_emailed_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('account_id', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user', to='app.account')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountAlias',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('acct', models.TextField(blank=True)),
                ('uri', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='aliases', to='app.account')),
            ],
            options={
                'verbose_name': 'Account alias',
                'verbose_name_plural': 'Account aliass',
                'db_table': 'account_aliases',
            },
        ),
        migrations.CreateModel(
            name='AccountDomainBlock',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.TextField(blank=True, unique=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_domain_blocks', to='app.account')),
            ],
            options={
                'verbose_name': 'Account domain',
                'verbose_name_plural': 'Account domains',
                'db_table': 'account_domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='AccountIdentityProof',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.TextField(unique=True)),
                ('provider_username', models.TextField(unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('live', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_identity_proofs', to='app.account')),
            ],
            options={
                'verbose_name': 'Account identity proof',
                'verbose_name_plural': 'Account identity proofs',
                'db_table': 'account_identity_proofs',
            },
        ),
        migrations.CreateModel(
            name='AccountMigration',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('followers_count', models.PositiveBigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='migrated_from', to='app.account')),
                ('target_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='migrated_to', to='app.account')),
            ],
            options={
                'verbose_name': 'Account migration',
                'verbose_name_plural': 'Account migrations',
                'db_table': 'account_migrations',
            },
        ),
        migrations.CreateModel(
            name='AccountModerationNote',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='filed_moderation_notes', to='app.account')),
                ('target_account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='issued_moderation_notes', to='app.account')),
            ],
            options={
                'verbose_name': 'Account moderation note',
                'verbose_name_plural': 'Account moderation notes',
                'db_table': 'account_moderation_notes',
            },
        ),
        migrations.CreateModel(
            name='AccountPin',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='pinned_accounts', to='app.account')),
                ('target_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='pinners', to='app.account')),
            ],
            options={
                'verbose_name': 'Account pin',
                'verbose_name_plural': 'Account pins',
                'db_table': 'account_pins',
            },
        ),
        migrations.CreateModel(
            name='AccountStats',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('statuses_count', models.PositiveBigIntegerField(default=0)),
                ('following_count', models.PositiveBigIntegerField(default=0)),
                ('followers_count', models.PositiveBigIntegerField(default=0)),
                ('last_status_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stats', to='app.account')),
            ],
            options={
                'verbose_name': 'Account stats',
                'verbose_name_plural': 'Account stats',
                'db_table': 'account_stats',
            },
        ),
        migrations.CreateModel(
            name='AccountWarning',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='filed_warnings', to='app.account')),
                ('target_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='issued_warnings', to='app.account')),
            ],
            options={
                'verbose_name': 'Account warning',
                'verbose_name_plural': 'Account warnings',
                'db_table': 'account_warnings',
            },
        ),
        migrations.CreateModel(
            name='AdminActionLog',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_type', models.TextField(blank=True, db_index=True)),
                ('target_id', models.TextField(blank=True, db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='admin_actions', to='app.account')),
            ],
            options={
                'verbose_name': 'Admin action log',
                'verbose_name_plural': 'Admin action logs',
                'db_table': 'admin_action_logs',
            },
        ),
        migrations.CreateModel(
            name='AnnouncementMute',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='announcement_mutes', to='app.account')),
                ('announcement_id', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='announcement_mutes', to='app.announcement')),
            ],
            options={
                'verbose_name': 'Announcement mute',
                'verbose_name_plural': 'Announcement mutes',
                'db_table': 'announcement_mutes',
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('processed', models.BooleanField(default=False)),
                ('dump_file_name', models.TextField(blank=True)),
                ('dump_content_type', models.TextField(blank=True)),
                ('dump_file_size', models.PositiveBigIntegerField(blank=True)),
                ('dump_updated_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup',
                'verbose_name_plural': 'Backups',
                'db_table': 'backups',
            },
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='blocked', to='app.account')),
                ('target_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='blockers', to='app.account')),
            ],
            options={
                'verbose_name': 'Block',
                'verbose_name_plural': 'Blocks',
                'db_table': 'blocks',
            },
        ),
        migrations.CreateModel(
            name='AccountConversation',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('unread', models.BooleanField(default=True)),
                ('last_status_id', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_conversations', to='app.account')),
                ('conversation_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_conversations', to='app.conversation')),
            ],
            options={
                'verbose_name': 'Account conversation',
                'verbose_name_plural': 'Account conversations',
                'db_table': 'account_conversations',
            },
        ),
        migrations.CreateModel(
            name='ConversationMute',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='conversation_mutes', to='app.account')),
                ('conversation_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='conversation_mutes', to='app.conversation')),
            ],
            options={
                'verbose_name': 'Conversation mute',
                'verbose_name_plural': 'Conversation mutes',
                'db_table': 'conversation_mutes',
            },
        ),
        migrations.CreateModel(
            name='AnnouncementReaction',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='announcement_reactions', to='app.account')),
                ('announcement_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='announcement_reactions', to='app.announcement')),
                ('custom_emoji_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='announcement_reactions', to='app.customemoji')),
            ],
            options={
                'verbose_name': 'Announcement reaction',
                'verbose_name_plural': 'Announcement reactions',
                'db_table': 'announcement_reactions',
            },
        ),
        migrations.CreateModel(
            name='CustomFilter',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('irreversible', models.BooleanField(default=False)),
                ('whole_word', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='custom_filters', to='app.account')),
            ],
            options={
                'verbose_name': 'Custom filter',
                'verbose_name_plural': 'Custom filters',
                'db_table': 'custome_filters',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_reblogs', models.BooleanField(default=True)),
                ('uri', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='follows', to='app.account')),
                ('target_account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='followers', to='app.account')),
            ],
            options={
                'verbose_name': 'Follow',
                'verbose_name_plural': 'Follows',
                'db_table': 'follows',
            },
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_reblogs', models.BooleanField(default=True)),
                ('uri', models.TextField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='follow_requests', to='app.account')),
                ('target_account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='follow_requesters', to='app.account')),
            ],
            options={
                'verbose_name': 'Follow request',
                'verbose_name_plural': 'Follow requests',
                'db_table': 'follow_requests',
            },
        ),
        migrations.CreateModel(
            name='Identity',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='identities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Identity',
                'verbose_name_plural': 'Identities',
                'db_table': 'identities',
            },
        ),
        migrations.CreateModel(
            name='Import',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved', models.BooleanField(default=True)),
                ('overwrite', models.BooleanField(default=True)),
                ('data_file_name', models.TextField(blank=True)),
                ('data_content_type', models.TextField(blank=True)),
                ('data_file_size', models.PositiveBigIntegerField(blank=True)),
                ('data_updated_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='account_import', to='app.account')),
            ],
            options={
                'verbose_name': 'Import',
                'verbose_name_plural': 'Imports',
                'db_table': 'imports',
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(unique=True)),
                ('used', models.BooleanField(default=False)),
                ('autofollow', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='invite', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invite',
                'verbose_name_plural': 'Invites',
                'db_table': 'invites',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='invite_id',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user', to='app.invite'),
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='lists', to='app.account')),
            ],
            options={
                'verbose_name': 'List',
                'verbose_name_plural': 'Lists',
                'db_table': 'lists',
            },
        ),
        migrations.CreateModel(
            name='ListAccount',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='list_accounts', to='app.account')),
                ('follow_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='list_accounts', to='app.follow')),
                ('list_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='list_accounts', to='app.list')),
            ],
            options={
                'verbose_name': 'List account',
                'verbose_name_plural': 'List accounts',
                'db_table': 'list_accounts',
            },
        ),
        migrations.CreateModel(
            name='Marker',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeline', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='markers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Marker',
                'verbose_name_plural': 'Markers',
                'db_table': 'markers',
            },
        ),
        migrations.CreateModel(
            name='Mute',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('hide_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='muted', to='app.account')),
                ('target_account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='muters', to='app.account')),
            ],
            options={
                'verbose_name': 'Mute',
                'verbose_name_plural': 'Mutes',
                'db_table': 'mutes',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.TextField(unique=True)),
                ('activity_type', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notifications', to='app.account')),
                ('from_account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notified', to='app.account')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='OAuthApplication',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(unique=True)),
                ('owner_type', models.TextField(blank=True, db_index=True)),
                ('website', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='oauth_applications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OAuth application',
                'verbose_name_plural': 'OAuth applications',
                'db_table': 'oauth_applications',
            },
        ),
        migrations.CreateModel(
            name='OAuthAccessToken',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(unique=True)),
                ('refresh_token', models.TextField(blank=True, unique=True)),
                ('expires_in', models.PositiveBigIntegerField(blank=True)),
                ('revoked_at', models.DateTimeField(blank=True)),
                ('scopes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource_owner_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='oauth_access_tokens', to=settings.AUTH_USER_MODEL)),
                ('application_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='oauth_access_tokens', to='app.oauthapplication')),
            ],
            options={
                'verbose_name': 'OAuth access token',
                'verbose_name_plural': 'OAuth access tokens',
                'db_table': 'oauth_access_tokens',
            },
        ),
        migrations.CreateModel(
            name='OAuthAccessGrant',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField(unique=True)),
                ('revoked_at', models.DateTimeField(blank=True)),
                ('scopes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource_owner_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='oauth_access_grants', to=settings.AUTH_USER_MODEL)),
                ('application_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='oauth_access_grants', to='app.oauthapplication')),
            ],
            options={
                'verbose_name': 'OAuth access grant',
                'verbose_name_plural': 'OAuth access grants',
                'db_table': 'oauth_access_grants',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='created_by_application_id',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='created_users', to='app.oauthapplication'),
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('multiple', models.BooleanField(default=False)),
                ('hide_totals', models.BooleanField(default=False)),
                ('votes_count', models.PositiveBigIntegerField(default=0)),
                ('expires_at', models.DateTimeField(blank=True)),
                ('last_fetched_at', models.DateTimeField(blank=True)),
                ('voters_count', models.PositiveBigIntegerField(blank=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='polls', to='app.account')),
            ],
            options={
                'verbose_name': 'Poll',
                'verbose_name_plural': 'Polls',
                'db_table': 'polls',
            },
        ),
        migrations.CreateModel(
            name='PollVote',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='poll_votes', to='app.account')),
                ('poll_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='poll_votes', to='app.poll')),
            ],
            options={
                'verbose_name': 'Poll vote',
                'verbose_name_plural': 'Poll votes',
                'db_table': 'poll_votes',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_taken', models.BooleanField(default=False)),
                ('uri', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='filed_reports', to='app.account')),
                ('action_taken_by_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actioned_reports', to='app.account')),
                ('assigned_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='assigned_reports', to='app.account')),
                ('target_account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='in_reports', to='app.account')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'db_table': 'reports',
            },
        ),
        migrations.CreateModel(
            name='ReportNote',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_notes', to='app.account')),
                ('report_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_notes', to='app.report')),
            ],
            options={
                'verbose_name': 'Report note',
                'verbose_name_plural': 'Report notes',
                'db_table': 'report_notes',
            },
        ),
        migrations.CreateModel(
            name='ScheduledStatus',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_at', models.DateTimeField(blank=True, db_index=True)),
                ('params', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='scheduled_statuses', to='app.account')),
            ],
            options={
                'verbose_name': 'Scheduled status',
                'verbose_name_plural': 'Scheduled statuss',
                'db_table': 'scheduled_statuses',
            },
        ),
        migrations.CreateModel(
            name='SessionActivation',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.TextField(unique=True)),
                ('ip', models.GenericIPAddressField(null=True)),
                ('web_push_subscription_id', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('access_token_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='session_activations', to='app.oauthaccesstoken')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='session_activations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Session activation',
                'verbose_name_plural': 'Session activations',
                'db_table': 'session_activations',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.TextField(blank=True, unique=True)),
                ('visibility', models.PositiveBigIntegerField(db_index=True)),
                ('sensitive', models.BooleanField(default=False)),
                ('spoiler_text', models.BooleanField(default=False)),
                ('reply', models.BooleanField(default=False)),
                ('language', models.TextField(blank=True)),
                ('conversation_id', models.TextField(blank=True)),
                ('poll_id', models.TextField(blank=True)),
                ('deleted_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='statuses', to='app.account')),
                ('in_reply_to_account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='replies', to='app.account')),
                ('in_reply_to_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='replies', to='app.status')),
                ('reblog_of_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reblogs', to='app.status')),
            ],
            options={
                'verbose_name': 'Status',
                'verbose_name_plural': 'Statuss',
                'db_table': 'statuses',
            },
        ),
        migrations.AddField(
            model_name='poll',
            name='status_id',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='polls', to='app.status'),
        ),
        migrations.CreateModel(
            name='Mention',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('silent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mentions', to='app.account')),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mentions', to='app.status')),
            ],
            options={
                'verbose_name': 'Mention',
                'verbose_name_plural': 'Mentions',
                'db_table': 'mentions',
            },
        ),
        migrations.CreateModel(
            name='MediaAttachment',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortcode', models.TextField(blank=True, unique=True)),
                ('file_file_name', models.TextField(blank=True)),
                ('file_file_size', models.PositiveBigIntegerField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('blurhash', models.TextField(blank=True)),
                ('file_updated_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='media_attachments', to='app.account')),
                ('scheduled_status_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='media_attachments', to='app.scheduledstatus')),
                ('status_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='media_attachments', to='app.status')),
            ],
            options={
                'verbose_name': 'Media attachment',
                'verbose_name_plural': 'Media attachments',
                'db_table': 'media_attachments',
            },
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='favourites', to='app.account')),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='favourites', to='app.status')),
            ],
            options={
                'verbose_name': 'Favourite',
                'verbose_name_plural': 'Favourites',
                'db_table': 'favourites',
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='bookmarks', to='app.account')),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='bookmarks', to='app.status')),
            ],
            options={
                'verbose_name': 'Bookmark',
                'verbose_name_plural': 'Bookmarks',
                'db_table': 'bookmarks',
            },
        ),
        migrations.CreateModel(
            name='StatusPin',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='pinned_statuses', to='app.account')),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='pins', to='app.status')),
            ],
            options={
                'verbose_name': 'Status pin',
                'verbose_name_plural': 'Status pins',
                'db_table': 'status_pins',
            },
        ),
        migrations.CreateModel(
            name='StatusStats',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('replies_count', models.PositiveBigIntegerField(default=0)),
                ('reblogs_count', models.PositiveBigIntegerField(default=0)),
                ('favourites_count', models.PositiveBigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stats', to='app.status')),
            ],
            options={
                'verbose_name': 'Status stats',
                'verbose_name_plural': 'Status stats',
                'db_table': 'status_stats',
            },
        ),
        migrations.CreateModel(
            name='FeaturedTag',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('statuses_count', models.PositiveBigIntegerField(default=0)),
                ('last_status_at', models.DateTimeField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='featured_tags', to='app.account')),
                ('tag_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='featured_tags', to='app.tag')),
            ],
            options={
                'verbose_name': 'Featured tag',
                'verbose_name_plural': 'Featured tags',
                'db_table': 'featured_tags',
            },
        ),
        migrations.CreateModel(
            name='AccountTagStats',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('accounts_count', models.PositiveBigIntegerField(default=0)),
                ('hidden', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tag_id', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_stats', to='app.tag')),
            ],
            options={
                'verbose_name': 'Account tag stats',
                'verbose_name_plural': 'Account tag stats',
                'db_table': 'account_tag_stats',
            },
        ),
        migrations.CreateModel(
            name='Tombstone',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.TextField(db_index=True)),
                ('by_moderator', models.BooleanField(blank=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tombstones', to='app.account')),
            ],
            options={
                'verbose_name': 'Tombstone',
                'verbose_name_plural': 'Tombstones',
                'db_table': 'tombstones',
            },
        ),
        migrations.CreateModel(
            name='UserInviteRequest',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='invite_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User invite request',
                'verbose_name_plural': 'User invite requests',
                'db_table': 'user_invite_requests',
            },
        ),
        migrations.CreateModel(
            name='WebPushSubscription',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('access_token_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='web_push_subscriptions', to='app.oauthaccesstoken')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='web_push_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Web push subscription',
                'verbose_name_plural': 'Web push subscriptions',
                'db_table': 'web_push_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='WebSetting',
            fields=[
                ('id', app.UUIDAutoField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='web_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Web setting',
                'verbose_name_plural': 'Web settings',
                'db_table': 'web_settings',
            },
        ),
    ]
