# Generated by Django 5.2.4 on 2025-07-26 13:59

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        migrations.swappable_dependency(settings.KNOX_TOKEN_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActorWarningPreset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Actor Warning Preset',
                'verbose_name_plural': 'Actor Warning Presets',
                'db_table': 'actor_warning_presets',
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('is_published', models.BooleanField(default=True)),
                ('is_all_day', models.BooleanField(default=False)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('starts_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
                'db_table': 'announcements',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('uri', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'db_table': 'conversations',
            },
        ),
        migrations.CreateModel(
            name='DomainAllow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain', models.URLField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Domain Allow',
                'verbose_name_plural': 'Domain Allows',
                'db_table': 'domain_allows',
            },
        ),
        migrations.CreateModel(
            name='DomainBlock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain', models.TextField(unique=True)),
                ('do_reject_media', models.BooleanField(default=True)),
                ('do_reject_reports', models.BooleanField(default=True)),
                ('severity', models.PositiveBigIntegerField(blank=True, null=True)),
                ('private_comment', models.TextField(blank=True, null=True)),
                ('public_comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Domain Block',
                'verbose_name_plural': 'Domain Blocks',
                'db_table': 'domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='EmailDomainBlock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain', models.TextField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Email Domain Block',
                'verbose_name_plural': 'Email Domain Blocks',
                'db_table': 'email_domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='PreviewCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(unique=True)),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('type', models.PositiveSmallIntegerField()),
                ('html', models.TextField()),
                ('author_name', models.TextField()),
                ('author_url', models.URLField()),
                ('provider_name', models.TextField()),
                ('provider_url', models.URLField()),
                ('width', models.PositiveBigIntegerField()),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('embed_url', models.URLField()),
                ('image_file_name', models.TextField(blank=True, null=True)),
                ('image_content_type', models.TextField(blank=True, null=True)),
                ('image_file_size', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('image_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Preview Card',
                'verbose_name_plural': 'Preview Cards',
                'db_table': 'preview_cards',
            },
        ),
        migrations.CreateModel(
            name='Relay',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('inbox_url', models.URLField()),
                ('state', models.PositiveBigIntegerField()),
                ('follow_activity_id', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Relay',
                'verbose_name_plural': 'Relays',
                'db_table': 'relays',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('var', models.TextField(unique=True)),
                ('thing_type', models.TextField(blank=True, null=True, unique=True)),
                ('thing_id', models.TextField(blank=True, null=True, unique=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='SiteUpload',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('var', models.TextField(unique=True)),
                ('file_name', models.TextField(blank=True, null=True)),
                ('file_content_type', models.TextField(blank=True, null=True)),
                ('file_meta_data', models.TextField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Site Upload',
                'verbose_name_plural': 'Site Uploads',
                'db_table': 'site_uploads',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True)),
                ('is_usable', models.BooleanField(blank=True, default=True, null=True)),
                ('is_trendable', models.BooleanField(blank=True, default=True, null=True)),
                ('is_listable', models.BooleanField(blank=True, default=True, null=True)),
                ('max_score', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('max_score_at', models.DateTimeField(blank=True, null=True)),
                ('last_post_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.TextField()),
                ('display_name', models.TextField()),
                ('also_known_as', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('note', models.TextField()),
                ('fields', models.JSONField(blank=True, null=True)),
                ('actor_type', models.TextField(blank=True, null=True)),
                ('uri', models.TextField(db_index=True)),
                ('url', models.URLField(blank=True, db_index=True, null=True)),
                ('secret', models.TextField()),
                ('public_key', models.TextField(blank=True, null=True)),
                ('private_key', models.TextField(blank=True, null=True)),
                ('protocol', models.PositiveBigIntegerField()),
                ('trust_level', models.PositiveBigIntegerField(blank=True, null=True)),
                ('is_discoverable', models.BooleanField(blank=True, default=True, null=True)),
                ('is_memorial', models.BooleanField(default=False)),
                ('is_locked', models.BooleanField(default=False)),
                ('inbox_url', models.URLField()),
                ('shared_inbox_url', models.URLField()),
                ('outbox_url', models.URLField()),
                ('followers_url', models.URLField()),
                ('featured_collections_url', models.URLField()),
                ('remote_url', models.URLField()),
                ('salmon_url', models.URLField()),
                ('hub_url', models.URLField()),
                ('domain', models.TextField(blank=True, null=True)),
                ('avatar_file_name', models.TextField(blank=True, null=True)),
                ('avatar_content_type', models.TextField(blank=True, null=True)),
                ('avatar_file_size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('avatar_updated_at', models.DateTimeField(blank=True, null=True)),
                ('avatar_remote_url', models.URLField(blank=True, null=True)),
                ('header_file_name', models.TextField(blank=True, null=True)),
                ('header_content_type', models.TextField(blank=True, null=True)),
                ('header_file_size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('header_updated_at', models.DateTimeField(blank=True, null=True)),
                ('header_remote_url', models.URLField(blank=True, null=True)),
                ('subscription_expires_at', models.DateTimeField(blank=True, null=True)),
                ('last_webfingered_at', models.DateTimeField(blank=True, null=True)),
                ('silenced_at', models.DateTimeField(blank=True, null=True)),
                ('suspended_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moved_to_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='moved_from_actor_id', to='nomad.actor')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Actor',
                'verbose_name_plural': 'Actors',
                'db_table': 'actors',
            },
        ),
        migrations.CreateModel(
            name='ActorAlias',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alias', models.TextField(blank=True, null=True)),
                ('uri', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='aliases', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Alias',
                'verbose_name_plural': 'Actor Aliass',
                'db_table': 'actor_aliass',
            },
        ),
        migrations.CreateModel(
            name='ActorDomainBlock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain', models.TextField(blank=True, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='domain_blocks', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Domain Block',
                'verbose_name_plural': 'Actor Domain Blocks',
                'db_table': 'actor_domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='ActorMigration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('actor_name', models.TextField()),
                ('followers_count', models.PositiveBigIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='migrated_from', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='migrated_to', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Migration',
                'verbose_name_plural': 'Actor Migrations',
                'db_table': 'actor_migrations',
            },
        ),
        migrations.CreateModel(
            name='ActorModerationNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issued_moderation_notes', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_moderation_notes', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Moderation Note',
                'verbose_name_plural': 'Actor Moderation Notes',
                'db_table': 'actor_moderation_notes',
            },
        ),
        migrations.CreateModel(
            name='ActorPin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pinned_actors', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pinned_by', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Pin',
                'verbose_name_plural': 'Actor Pins',
                'db_table': 'actor_pins',
            },
        ),
        migrations.CreateModel(
            name='ActorStats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('posts_count', models.PositiveBigIntegerField(default=0)),
                ('following_count', models.PositiveBigIntegerField(default=0)),
                ('followers_count', models.PositiveBigIntegerField(default=0)),
                ('lock_version', models.PositiveBigIntegerField(default=0)),
                ('last_posted', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Stats',
                'verbose_name_plural': 'Actor Stats',
                'db_table': 'actor_stats',
            },
        ),
        migrations.CreateModel(
            name='ActorWarning',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.PositiveBigIntegerField()),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issued_warnings', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_warnings', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Actor Warning',
                'verbose_name_plural': 'Actor Warnings',
                'db_table': 'actor_warnings',
            },
        ),
        migrations.CreateModel(
            name='AdminActionLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('target_actor_type', models.TextField(blank=True, db_index=True, null=True)),
                ('action', models.TextField()),
                ('recorded_changes', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='issued_admin_actions', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_admin_actions', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Admin Action Log',
                'verbose_name_plural': 'Admin Action Logs',
                'db_table': 'admin_action_logs',
            },
        ),
        migrations.CreateModel(
            name='AnnouncementMute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='announcement_mutes', to='nomad.actor')),
                ('announcement_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mutes', to='nomad.announcement')),
            ],
            options={
                'verbose_name': 'Announcement Mute',
                'verbose_name_plural': 'Announcement Mutes',
                'db_table': 'announcement_mutes',
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID, editable=False, primary_key=True, serialize=False)),
                ('is_processed', models.BooleanField(default=False)),
                ('dump_file_name', models.TextField(blank=True, null=True)),
                ('dump_content_type', models.TextField(blank=True, null=True)),
                ('dump_file_size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('dump_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup',
                'verbose_name_plural': 'Backups',
                'db_table': 'backups',
            },
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('uri', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blocks', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blockers', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Block',
                'verbose_name_plural': 'Blocks',
                'db_table': 'blocks',
            },
        ),
        migrations.CreateModel(
            name='CustomEmoji',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('short_code', models.TextField(unique=True)),
                ('domain', models.TextField(blank=True, null=True, unique=True)),
                ('is_disabled', models.BooleanField(default=False)),
                ('is_visible_in_selector', models.BooleanField(default=True)),
                ('image_file_name', models.TextField(blank=True, null=True)),
                ('image_content_type', models.TextField(blank=True, null=True)),
                ('image_file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('image_remote_url', models.URLField(blank=True, null=True)),
                ('image_uploaded_at', models.DateTimeField(blank=True, null=True)),
                ('uri', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='custom_emojis', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Custom Emoji',
                'verbose_name_plural': 'Custom Emojis',
                'db_table': 'custom_emojis',
            },
        ),
        migrations.CreateModel(
            name='AnnouncementReaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='announcement_reactions', to='nomad.actor')),
                ('announcement_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='nomad.announcement')),
                ('custom_emoji_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='announcement_reactions', to='nomad.customemoji')),
            ],
            options={
                'verbose_name': 'Announcement Reaction',
                'verbose_name_plural': 'Announcement Reactions',
                'db_table': 'announcement_reactions',
            },
        ),
        migrations.CreateModel(
            name='CustomEmojiCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='custom_emoji_categories', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Custom Emoji Category',
                'verbose_name_plural': 'Custom Emoji Categorys',
                'db_table': 'custom_emoji_categorys',
            },
        ),
        migrations.AddField(
            model_name='customemoji',
            name='category_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='emojis', to='nomad.customemojicategory'),
        ),
        migrations.CreateModel(
            name='CustomFilter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phrase', models.TextField()),
                ('context', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('is_irreversible', models.BooleanField(default=False)),
                ('do_filter_entire_word', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_filters', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Custom Filter',
                'verbose_name_plural': 'Custom Filters',
                'db_table': 'custom_filters',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('do_show_reblogs', models.BooleanField(default=True)),
                ('uri', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follows', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Follow',
                'verbose_name_plural': 'Follows',
                'db_table': 'follows',
            },
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('do_show_reblogs', models.BooleanField(default=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_requests', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_requesters', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Follow Request',
                'verbose_name_plural': 'Follow Requests',
                'db_table': 'follow_requests',
            },
        ),
        migrations.CreateModel(
            name='Import',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.TextField()),
                ('is_approved', models.BooleanField(default=True)),
                ('overwrite', models.BooleanField(default=True)),
                ('data_file_name', models.TextField(blank=True, null=True)),
                ('data_content_type', models.TextField(blank=True, null=True)),
                ('data_file_size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('data_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imports', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Import',
                'verbose_name_plural': 'Imports',
                'db_table': 'imports',
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.TextField(unique=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_used', models.BooleanField(default=False)),
                ('do_auto_follow', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invite',
                'verbose_name_plural': 'Invites',
                'db_table': 'invites',
            },
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lists', to='nomad.list')),
            ],
            options={
                'verbose_name': 'List',
                'verbose_name_plural': 'Lists',
                'db_table': 'lists',
            },
        ),
        migrations.CreateModel(
            name='ListActor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lists', to='nomad.actor')),
                ('follow_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lists', to='nomad.follow')),
                ('list_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actors', to='nomad.list')),
            ],
            options={
                'verbose_name': 'List Actor',
                'verbose_name_plural': 'List Actors',
                'db_table': 'list_actors',
            },
        ),
        migrations.CreateModel(
            name='Mute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('do_hide_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mutes', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='muters', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Mute',
                'verbose_name_plural': 'Mutes',
                'db_table': 'mutes',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_id', models.TextField()),
                ('activity_type', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_received', to='nomad.actor')),
                ('from_actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_sent', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('options', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('cached_tallies', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveBigIntegerField(), default=list, size=None)),
                ('votes_count', models.PositiveBigIntegerField(default=0)),
                ('voters_count', models.PositiveSmallIntegerField(blank=True, default=0, null=True)),
                ('is_multiple_allowed', models.BooleanField(default=False)),
                ('do_hide_totals', models.BooleanField(default=False)),
                ('lock_version', models.PositiveBigIntegerField(default=0)),
                ('last_fetched_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polls', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Poll',
                'verbose_name_plural': 'Polls',
                'db_table': 'polls',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField()),
                ('language', models.TextField(blank=True, null=True)),
                ('uri', models.TextField(blank=True, null=True, unique=True)),
                ('url', models.URLField()),
                ('visibility', models.PositiveBigIntegerField(db_index=True)),
                ('is_sensitive', models.BooleanField(default=False)),
                ('is_spoiler', models.BooleanField(default=False)),
                ('is_reply', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='nomad.actor')),
                ('conversation_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='conversations', to='nomad.conversation')),
                ('in_reply_to_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='nomad.actor')),
                ('in_reply_to_post_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='nomad.post')),
                ('poll_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polls', to='nomad.poll')),
                ('reblog_of_post_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reblogs', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'db_table': 'posts',
            },
        ),
        migrations.CreateModel(
            name='PollVote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('choice', models.PositiveBigIntegerField()),
                ('url', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='poll_votes', to='nomad.actor')),
                ('post_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='poll_votes', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Poll Vote',
                'verbose_name_plural': 'Poll Votes',
                'db_table': 'poll_votes',
            },
        ),
        migrations.AddField(
            model_name='poll',
            name='post_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polls', to='nomad.post'),
        ),
        migrations.CreateModel(
            name='Mention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_silent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentions', to='nomad.actor')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentions', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Mention',
                'verbose_name_plural': 'Mentions',
                'db_table': 'mentions',
            },
        ),
        migrations.CreateModel(
            name='Marker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timeline', models.TextField(unique=True)),
                ('lock_version', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='markers', to=settings.AUTH_USER_MODEL)),
                ('last_read_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='markers', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Marker',
                'verbose_name_plural': 'Markers',
                'db_table': 'markers',
            },
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favourites', to='nomad.actor')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favourites', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Favourite',
                'verbose_name_plural': 'Favourites',
                'db_table': 'favourites',
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='nomad.actor')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Bookmark',
                'verbose_name_plural': 'Bookmarks',
                'db_table': 'bookmarks',
            },
        ),
        migrations.CreateModel(
            name='PostPin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pinned_posts', to='nomad.actor')),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pins', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Post Pin',
                'verbose_name_plural': 'Post Pins',
                'db_table': 'post_pins',
            },
        ),
        migrations.CreateModel(
            name='PostStats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('replies_count', models.PositiveBigIntegerField(default=0)),
                ('reblogs_count', models.PositiveBigIntegerField(default=0)),
                ('favourites_count', models.PositiveBigIntegerField(default=0)),
                ('bookmarks_count', models.PositiveSmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='nomad.post')),
            ],
            options={
                'verbose_name': 'Post Stats',
                'verbose_name_plural': 'Post Stats',
                'db_table': 'post_stats',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('post_ids', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('comment', models.TextField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('uri', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action_taken_by_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reports_acted_on', to='nomad.actor')),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filed_reports', to='nomad.actor')),
                ('assigned_to_actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='assigned_reports', to='nomad.actor')),
                ('target_actor_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_reports', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'db_table': 'reports',
            },
        ),
        migrations.CreateModel(
            name='ReportNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_notes', to='nomad.actor')),
                ('report_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='report_notes', to='nomad.report')),
            ],
            options={
                'verbose_name': 'Report Note',
                'verbose_name_plural': 'Report Notes',
                'db_table': 'report_notes',
            },
        ),
        migrations.CreateModel(
            name='ActorTagStats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('accounts_count', models.PositiveIntegerField(default=0)),
                ('is_hidden', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tag_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='nomad.tag')),
            ],
            options={
                'verbose_name': 'Actor Tag Stats',
                'verbose_name_plural': '$Actor Tag Statss',
                'db_table': '$actor_tag_statss',
            },
        ),
        migrations.CreateModel(
            name='TombStone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('uri', models.TextField(db_index=True)),
                ('is_from_moderator', models.BooleanField(blank=True, default=False, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tomb_stones', to='nomad.actor')),
            ],
            options={
                'verbose_name': 'Tomb Stone',
                'verbose_name_plural': 'Tomb Stones',
                'db_table': 'tomb_stones',
            },
        ),
        migrations.CreateModel(
            name='UserInvite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invite_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Invite',
                'verbose_name_plural': 'User Invites',
                'db_table': 'user_invites',
            },
        ),
        migrations.CreateModel(
            name='WebPushSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('endpoint', models.TextField()),
                ('key_p256dh', models.TextField()),
                ('key_auth', models.TextField()),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('access_token_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='web_push_subscriptions', to=settings.KNOX_TOKEN_MODEL)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='web_push_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Web Push Subscription',
                'verbose_name_plural': 'Web Push Subscriptions',
                'db_table': 'web_push_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='WebSetting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='web_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Web Setting',
                'verbose_name_plural': 'Web Settings',
                'db_table': 'web_settings',
            },
        ),
    ]
